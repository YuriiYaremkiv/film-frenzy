{"version":3,"file":"static/js/275.461ab898.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ActorsList/ActorsList.module.scss?fe4f","components/ActorsList/ActorsList.js","components/Cast/Cast.js","components/Error/Error.js","webpack://react-homework-template/./src/components/Loader/Loader.module.scss?a435","components/Loader/Loader.js","utils/fetchAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"actorsList\":\"ActorsList_actorsList__WE7oK\",\"actorsList__item\":\"ActorsList_actorsList__item__jcujw\",\"actorsList__img\":\"ActorsList_actorsList__img__5rhbA\",\"actorsList__other\":\"ActorsList_actorsList__other__XClza\"};","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport css from './ActorsList.module.scss';\n\nexport const ActorsList = ({ actors }) => {\n  const [actorsWithImage, setActorsWithImage] = useState([]);\n  const [actorOthers, setActorsOthers] = useState([]);\n\n  useEffect(() => {\n    const actorImages = actors.filter(actor => {\n      return actor.profile_path !== null;\n    });\n\n    const other = actors.filter(actor => {\n      return actor.profile_path === null;\n    });\n    setActorsWithImage(actorImages);\n    setActorsOthers(other);\n  }, [actors]);\n\n  return (\n    <ul className={css.actorsList}>\n      {actorsWithImage.length > 0\n        ? actorsWithImage.map(({ id, name, character, profile_path }) => {\n            return (\n              <li key={id} className={css.actorsList__item}>\n                <img\n                  className={css.actorsList__img}\n                  src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                  alt={name}\n                  width=\"70\"\n                />\n                <div>\n                  <b>{name}</b>\n                  <p>Character: {character}</p>\n                </div>\n              </li>\n            );\n          })\n        : null}\n\n      {actorOthers.length > 0 ? (\n        <h2 className={css.actorsList__other}>Others actors:</h2>\n      ) : null}\n      {actorOthers.length > 0\n        ? actorOthers.map(({ id, name }) => {\n            return (\n              <li key={id}>\n                <b>{name}</b>\n              </li>\n            );\n          })\n        : null}\n    </ul>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ActorsList } from '../ActorsList/ActorsList';\nimport { Loader } from '../../components/Loader/Loader';\nimport { Error } from '../../components/Error/Error';\nimport { getFetchByCredits } from '../../utils/fetchAPI';\n\nconst Cast = () => {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoadind] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoadind(true);\n    (async () => {\n      try {\n        const movie = await getFetchByCredits(movieId);\n        setActors(movie);\n        setLoadind(false);\n      } catch (error) {\n        setLoadind(false);\n        setError(true);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? <Loader /> : null}\n      {error ? <Error /> : null}\n      {!loading && !error && actors.length ? (\n        <ActorsList actors={actors} />\n      ) : (\n        <p>We don't find any actors for this movie!</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","export const Error = () => {\n  return <div>Error. Sorry no find any films</div>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"loader\":\"Loader_loader__DwtSp\"};","import { RotatingLines } from 'react-loader-spinner';\nimport css from './Loader.module.scss';\n\nexport const Loader = () => {\n  return (\n    <div className={css.loader}>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd08efe59ac708d7aace6afed9ba7eae9';\n\nexport const getFetchTrending = async () => {\n  const response = await fetch(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByCredits = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchQuery = async query => {\n  const response = await fetch(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n"],"names":["ActorsList","actors","useState","actorsWithImage","setActorsWithImage","actorOthers","setActorsOthers","useEffect","actorImages","filter","actor","profile_path","other","className","css","length","map","id","name","character","src","alt","width","setActors","loading","setLoadind","error","setError","movieId","useParams","getFetchByCredits","movie","Loader","Error","strokeColor","strokeWidth","animationDuration","visible","BASE_URL","KEY","getFetchTrending","fetch","response","ok","json","data","results","getFetchById","cast","getFetchByReviews","getFetchQuery","query"],"sourceRoot":""}