{"version":3,"file":"static/js/632.83b5bd14.chunk.js","mappings":"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","sources":["api/modules/media.api.js","utils/fetchAPI.js","pages/PageMovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd08efe59ac708d7aace6afed9ba7eae9';\n\nconst mediaEndpoints = {\n  listTrending: ({ mediaType, timeWindow, page }) =>\n    `${BASE_URL}trending/${mediaType}/${timeWindow}?api_key=${KEY}&page=${page}`,\n  listMovies: ({ movieType, page }) =>\n    `${BASE_URL}movie/${movieType}?api_key=${KEY}&page=${page}`,\n  listRecommendationMovies: ({ movieId, page }) =>\n    `${BASE_URL}movie/${movieId}/recommendations?api_key=${KEY}&page=${page}`,\n  detailsMovie: ({ movieId }) => `${BASE_URL}movie/${movieId}?api_key=${KEY}`,\n  trailer: ({ movieId }) => `${BASE_URL}movie/${movieId}/videos?api_key=${KEY}`,\n  genres: () => `${BASE_URL}genre/movie/list?api_key=${KEY}`,\n};\n\nconst mediaApi = {\n  getList: async ({ mediaType, timeWindow, page = 1 }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.listTrending({ mediaType, timeWindow, page })\n      );\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getMovies: async ({ movieType, page = 1 }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.listMovies({ movieType, page })\n      );\n\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getRecommendationMovies: async ({ movieId, page = 1 }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.listRecommendationMovies({ movieId, page })\n      );\n\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getTrailer: async ({ movieId }) => {\n    try {\n      const response = await axios.get(mediaEndpoints.trailer({ movieId }));\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getDetailsForMovie: async ({ movieId }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.detailsMovie({ movieId })\n      );\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getGenres: async () => {\n    try {\n      const response = await axios.get(mediaEndpoints.genres());\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n};\n\nexport default mediaApi;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd08efe59ac708d7aace6afed9ba7eae9';\n\nexport const getFetchTrending = async () => {\n  const response = await fetch(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByCredits = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchQuery = async query => {\n  const response = await fetch(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { SectionMovieDetails } from 'components/SectionMovieDetails/SectionMovieDetails';\nimport { Error } from '../components/Error/Error';\nimport { SectionRecommendation } from 'components/SectionRecommendation/SectionRecommendation';\nimport { GlobalLoaderLogo } from 'components/GlobalLoaderLogo/GlobalLoaderLogo';\nimport { getFetchByCredits, getFetchByReviews } from 'utils/fetchAPI';\nimport Cast from 'components/SectionCast/SectionCast';\nimport Reviews from 'components/SectopmReviews/SectionReviews';\nimport mediaApi from 'api/modules/media.api';\n\nconst initialState = {\n  data: [],\n  isLoading: false,\n  error: '',\n};\n\nconst PageMovieDetails = () => {\n  const [movie, setMovie] = useState(initialState);\n  const [actors, setActors] = useState(initialState);\n  const [reviews, setReviews] = useState(initialState);\n  const [recommendation, setRecommendation] = useState(initialState);\n  const [trailer, setTrailer] = useState(initialState);\n  const { movieId } = useParams();\n\n  const globalLoading =\n    movie.isLoading &&\n    actors.isLoading &&\n    reviews.isLoading &&\n    recommendation.isLoading &&\n    trailer.isLoading;\n\n  useEffect(() => {\n    (async () => {\n      setMovie({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await mediaApi.getDetailsForMovie({\n        movieId: movieId,\n      });\n\n      if (response) {\n        setMovie({\n          data: response.data,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setMovie({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    (async () => {\n      setActors({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n      try {\n        const movie = await getFetchByCredits(movieId);\n        const actors = movie.filter(actor => {\n          if (actor.profile_path) {\n            return actor;\n          }\n          return false;\n        });\n\n        setActors({\n          data: actors,\n          isLoading: false,\n          error: '',\n        });\n      } catch (err) {\n        setActors({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    (async () => {\n      setReviews({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n      try {\n        const response = await getFetchByReviews(movieId);\n        const reviews = response.filter(review => {\n          if (review.author_details.avatar_path) {\n            return true;\n          }\n          return false;\n        });\n\n        setReviews({\n          data: reviews,\n          isLoading: false,\n          error: '',\n        });\n      } catch (err) {\n        setReviews({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    (async () => {\n      setRecommendation({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await mediaApi.getRecommendationMovies({\n        movieId: movieId,\n      });\n\n      if (response) {\n        setRecommendation({\n          data: response.data.results,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setRecommendation({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [movieId]);\n\n  useEffect(() => {\n    (async () => {\n      setTrailer({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await mediaApi.getTrailer({\n        movieId: movieId,\n      });\n\n      if (response) {\n        const officailTrailer = response.data.results.filter(trailer => {\n          if (trailer.name === 'Official Trailer') {\n            return true;\n          }\n          return false;\n        });\n        setTrailer({\n          data: officailTrailer,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setTrailer({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div>\n        {movie.data && !movie.error ? (\n          <SectionMovieDetails movieInfo={movie.data} trailer={trailer.data} />\n        ) : (\n          <Error title=\"Sorry, we're experiencing a temporary network issue. Please try again later.\" />\n        )}\n\n        {actors.data.length && !actors.error && !movie.error ? (\n          <Cast actors={actors.data} />\n        ) : null}\n\n        {reviews.data.length && !reviews.error && !movie.error ? (\n          <Reviews reviews={reviews.data} />\n        ) : null}\n\n        {recommendation.data.length && !recommendation.error && !movie.error ? (\n          <SectionRecommendation recommendation={recommendation.data} />\n        ) : null}\n      </div>\n      {globalLoading && <GlobalLoaderLogo />}\n    </div>\n  );\n};\n\nexport default PageMovieDetails;\n"],"names":["BASE_URL","KEY","mediaEndpoints","mediaType","timeWindow","page","movieType","movieId","mediaApi","getList","axios","response","err","getMovies","getRecommendationMovies","getTrailer","getDetailsForMovie","getGenres","getFetchByCredits","fetch","ok","json","data","cast","Error","getFetchByReviews","results","initialState","isLoading","error","useState","movie","setMovie","actors","setActors","reviews","setReviews","recommendation","setRecommendation","trailer","setTrailer","useParams","globalLoading","useEffect","message","filter","actor","profile_path","review","author_details","avatar_path","officailTrailer","name","style","position","SectionMovieDetails","movieInfo","title","length","SectionRecommendation","GlobalLoaderLogo"],"sourceRoot":""}