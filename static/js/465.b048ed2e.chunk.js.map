{"version":3,"file":"static/js/465.b048ed2e.chunk.js","mappings":"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","sources":["api/modules/tv.api.js","pages/PageTVDetails.jsx"],"sourcesContent":["import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'd08efe59ac708d7aace6afed9ba7eae9';\n\nconst mediaEndpoints = {\n  listTV: ({ mediaType, tvType, page }) =>\n    `${BASE_URL}${mediaType}/${tvType}?api_key=${KEY}&page=${page}`,\n  detailsTV: ({ tvId }) => `${BASE_URL}tv/${tvId}?api_key=${KEY}`,\n  creditsByTV: ({ tvId }) => `${BASE_URL}tv/${tvId}/credits?api_key=${KEY}`,\n  reviewsByTV: ({ tvId }) => `${BASE_URL}tv/${tvId}/reviews?api_key=${KEY}`,\n  trailersByTV: ({ tvId }) => `${BASE_URL}tv/${tvId}/videos?api_key=${KEY}`,\n  recommendationsByTV: ({ tvId }) =>\n    `${BASE_URL}tv/${tvId}/recommendations?api_key=${KEY}`,\n  genresByTV: () => `${BASE_URL}genre/tv/list?api_key=${KEY}`,\n};\n\nconst tvAPI = {\n  getTV: async ({ mediaType, tvType, page = 1 }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.listTV({ mediaType, tvType, page })\n      );\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getDetailsForTV: async ({ tvId }) => {\n    try {\n      const response = await axios.get(mediaEndpoints.detailsTV({ tvId }));\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getCreditsByTV: async ({ tvId }) => {\n    try {\n      const response = await axios.get(mediaEndpoints.creditsByTV({ tvId }));\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getReviewsByTV: async ({ tvId }) => {\n    try {\n      const response = await axios.get(mediaEndpoints.reviewsByTV({ tvId }));\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getRecommendationsByTV: async ({ tvId }) => {\n    try {\n      const response = await axios.get(\n        mediaEndpoints.recommendationsByTV({ tvId })\n      );\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getTrailersByTV: async ({ tvId }) => {\n    try {\n      const response = await axios.get(mediaEndpoints.trailersByTV({ tvId }));\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n  getGenresByTV: async () => {\n    try {\n      const response = await axios.get(mediaEndpoints.genresByTV());\n      return { response };\n    } catch (err) {\n      return { err };\n    }\n  },\n};\n\nexport default tvAPI;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Error } from '../components/Error/Error';\nimport { SectionMovieDetails } from 'components/SectionMovieDetails/SectionMovieDetails';\nimport { SectionRecommendation } from 'components/SectionRecommendation/SectionRecommendation';\nimport { GlobalLoaderLogo } from 'components/GlobalLoaderLogo/GlobalLoaderLogo';\nimport Cast from 'components/SectionCast/SectionCast';\nimport Reviews from 'components/SectopmReviews/SectionReviews';\nimport tvAPI from 'api/modules/tv.api';\n\nconst initialState = {\n  data: [],\n  isLoading: false,\n  error: '',\n};\n\nconst PageMovieDetails = () => {\n  const [tv, setTv] = useState(initialState);\n  const [actors, setActors] = useState(initialState);\n  const [reviews, setReviews] = useState(initialState);\n  const [recommendation, setRecommendation] = useState(initialState);\n  const [trailer, setTrailer] = useState(initialState);\n  const { tvId } = useParams();\n\n  const globalLoading =\n    tv.isLoading &&\n    actors.isLoading &&\n    reviews.isLoading &&\n    recommendation.isLoading &&\n    trailer.isLoading;\n\n  useEffect(() => {\n    (async () => {\n      setTv({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await tvAPI.getDetailsForTV({\n        tvId,\n      });\n\n      if (response) {\n        setTv({\n          data: response.data,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setTv({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [tvId]);\n\n  useEffect(() => {\n    (async () => {\n      setActors({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await tvAPI.getCreditsByTV({\n        tvId,\n      });\n\n      if (response) {\n        const allActors = [...response.data.cast];\n        const actorsOnlyImage = allActors.filter(actor => {\n          if (actor.profile_path) {\n            return actor;\n          }\n          return false;\n        });\n        setActors({\n          data: actorsOnlyImage.sort((a, b) => b.popularity - a.popularity),\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setActors({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [tvId]);\n\n  useEffect(() => {\n    (async () => {\n      setReviews({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await tvAPI.getReviewsByTV({\n        tvId,\n      });\n\n      if (response) {\n        setReviews({\n          data: response.data.results,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setReviews({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [tvId]);\n\n  useEffect(() => {\n    (async () => {\n      setRecommendation({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await tvAPI.getRecommendationsByTV({\n        tvId,\n      });\n\n      if (response) {\n        const recommendation = response.data.results.filter(media => {\n          if (media.backdrop_path) {\n            return media;\n          }\n          return false;\n        });\n\n        setRecommendation({\n          data: recommendation,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setRecommendation({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [tvId]);\n\n  useEffect(() => {\n    (async () => {\n      setTrailer({\n        data: [],\n        isLoading: true,\n        error: '',\n      });\n\n      const { response, err } = await tvAPI.getTrailersByTV({\n        tvId: tvId,\n      });\n\n      if (response) {\n        const officailTrailer = response.data.results.filter(trailer => {\n          if (trailer.name === 'Official Trailer') {\n            return true;\n          }\n          return false;\n        });\n        setTrailer({\n          data: officailTrailer,\n          isLoading: false,\n          error: '',\n        });\n      }\n\n      if (err) {\n        setTrailer({\n          data: [],\n          isLoading: false,\n          error: err.message,\n        });\n      }\n    })();\n  }, [tvId]);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <div>\n        {tv.data && !tv.error ? (\n          <SectionMovieDetails movieInfo={tv.data} trailer={trailer.data} />\n        ) : (\n          <Error title=\"Sorry, we're experiencing a temporary network issue. Please try again later.\" />\n        )}\n\n        {actors.data.length && !actors.error && !tv.error ? (\n          <Cast actors={actors.data} />\n        ) : null}\n\n        {reviews.data.length && !reviews.error && !tv.error ? (\n          <Reviews reviews={reviews.data} />\n        ) : null}\n\n        {recommendation.data.length && !recommendation.error && !tv.error ? (\n          <SectionRecommendation recommendation={recommendation.data} />\n        ) : null}\n      </div>\n      {globalLoading && <GlobalLoaderLogo />}\n    </div>\n  );\n};\n\nexport default PageMovieDetails;\n"],"names":["BASE_URL","KEY","mediaEndpoints","mediaType","tvType","page","tvId","tvAPI","getTV","axios","response","err","getDetailsForTV","getCreditsByTV","getReviewsByTV","getRecommendationsByTV","getTrailersByTV","getGenresByTV","initialState","data","isLoading","error","useState","tv","setTv","actors","setActors","reviews","setReviews","recommendation","setRecommendation","trailer","setTrailer","useParams","globalLoading","useEffect","message","allActors","cast","actorsOnlyImage","filter","actor","profile_path","sort","a","b","popularity","results","media","backdrop_path","officailTrailer","name","style","position","movieInfo","title","length"],"sourceRoot":""}